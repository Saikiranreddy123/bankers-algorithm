//BANKERS ALGORITHM USING MULTITHREAD

#include<stdio.h>

#include<stdlib.h>

#include<pthread.h> void bankersalloc(); void banker();
void allocation_table;

void *resource_request();

int main(){ pthread_t t1; pthread_create(&t1,NULL,resource_request,NULL); pthread_join(&t1,NULL,resource_request);
int resr;

int ALLOCATE[10][10]; int MaxAlloc[10][10]; int N[10][10];
int W[1][10]; int n,m,pid,ch; bankersalloc(ALLOCATE,N,MaxAlloc,W,&n,&m); resr=banker(ALLOCATE,N,W,n,MaxAlloc);
printf("The resource will be allocated once the system is in safe state"); resource_request(ALLOCATE,N,W,pid-1,MaxAlloc); resr=banker(ALLOCATE,N,W,n,MaxAlloc);
printf("if the system is in unsafe state no resources could be allocated");

if(resr == 0 ) 
break;

}

void allocation_table(int x[][10],int n,int m){

int i,j;

for(i=0;i<n;i++){ printf("\n"); for(j=0;j<m;j++){
printf("%d\t",x[i][j]);

}

}

}

void resource_request(int ALLOCATE[10][10],int N[10][10],int ALLOCATEV[10][10],int pid,int m)

{

int reqmat[1][10];

int i;

printf("\n Enter which resources to be allocated :- \n")

scanf("%d",&m);

for(i=0;i<m;i++)

if(reqmat[0][i] > N[pid][i]){

printf("\n Error encountered.\n");

break;

}






} 
int safealgorithm(int ALLOCATE[][10],int N[][10],int AV[1][10],int n,int m,int a[]){




int i,j,k,x=0;

int F[10],W[1][10];

for(i=0;i<m;i++)

if(flag == 0 && F[i] == 0){ for(j=0;j<m;j++) W[0][j]+=ALLOCATE[i][j]; F[i]=1;
pflag++;

}

}

}

if(pflag == n)

return 1;

}

return 1;

}

//Banker's Algorithm

void bankersalloc(int ALLOCATE[][10],int N[][10],int MaxAlloc[10][10],int W[1][10],int *n,int *m){

int i,j;

printf("\n Enter total no. of processes : ");

scanf("%d",n);

printf("\n Enter total no. of resources : ");

scanf("%d",m); 
for(i=0;i<*n;i++){

printf("\n Process %d\n",i+1);

for(j=0;j<*m;j++){

printf(" Allocation for resource %d : ",j+1);

scanf("%d",&ALLOCATE[i][j]);

}

}

for(i=0;i<*n;i++)

for(j=0;j<*m;j++)

N[i][j]=MaxAlloc[i][j]-ALLOCATE[i][j]; printf("\n Allocation Matrix"); print(ALLOCATE,*n,*m);
printf("\n Maximum Requirement Matrix");

print(MaxAlloc,*n,*m);

printf("\n Need Matrix");

print(N,*n,*m);




}




int banker(int ALLOCATE[][10],int N[][10],int W[1][10],int n,int m){

int j,i,ALLOCATE[10]; j=safealgorith(ALLOCATE,N,W,n,m,a); if(j != 0 ){
for(i=0;i<n;i++)

{ 
printf(" P%d  ",ALLOCATE[i]);

printf("\n A safealgorith sequence has been detected.\n");

}

else

{

printf("\n Deadlock has occured.\n");

}

}
